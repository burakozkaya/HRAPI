// <auto-generated />
using System;
using HrApp.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HrApp.Persistence.Migrations
{
    [DbContext(typeof(HrAppDbContext))]
    [Migration("20240111205232_mig-13")]
    partial class mig13
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HrApp.Domain.Entities.Advance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdvanceTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdvanceTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Advance");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.AdvanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdvanceType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Individual"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Corporate"
                        });
                });

            modelBuilder.Entity("HrApp.Domain.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "62e90be7-9942-4c31-9923-86ba0cafba13",
                            ConcurrencyStamp = "29cec39b-1430-42a5-8bd7-dd76a946ce9f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "722d01b9-5dfa-4795-a8ae-efc8f8b71a1f",
                            Name = "WebsiteManager",
                            NormalizedName = "WEBSITEMANAGER"
                        });
                });

            modelBuilder.Entity("HrApp.Domain.Entities.ApprovalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApprovalStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Waiting..."
                        },
                        new
                        {
                            Id = 2,
                            Name = "Approved!"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Declined!"
                        });
                });

            modelBuilder.Entity("HrApp.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthYear")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TurkishIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("YearlyAdvanceAmountLeft")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("YearlyLeaveDaysLeft")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7ba9de78-27ed-4689-b4ee-eae290c65212",
                            AccessFailedCount = 0,
                            Address = "address1231231231232",
                            BirthPlace = "Istanbul",
                            BirthYear = new DateTime(1994, 1, 11, 23, 52, 31, 359, DateTimeKind.Local).AddTicks(4612),
                            CompanyId = 2,
                            ConcurrencyStamp = "156ddc0a-1214-4623-827c-67b6d390a5c9",
                            Department = "IT",
                            Email = "user@gmail.com",
                            EmailConfirmed = true,
                            GenderId = 2,
                            LockoutEnabled = false,
                            MobileNumber = "5554443322",
                            Name = "user",
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER1",
                            Occupation = "Formatçı",
                            PasswordHash = "AQAAAAEAACcQAAAAENbfIX4PXkh7hWwfRn3TfVCvowiR+Z9MqXhI3cAnl/DTmdEZSrOT/fP619J/EBn6SA==",
                            PhoneNumberConfirmed = false,
                            Salary = 20000m,
                            SecurityStamp = "26b04f68-2c01-4019-82e6-33b62284086a",
                            StartDate = new DateTime(2014, 1, 11, 23, 52, 31, 359, DateTimeKind.Local).AddTicks(4630),
                            Surname = "usersurname",
                            TurkishIdentificationNumber = "11111111111",
                            TwoFactorEnabled = false,
                            UserName = "user1",
                            YearlyAdvanceAmountLeft = 40000m,
                            YearlyLeaveDaysLeft = 20
                        },
                        new
                        {
                            Id = "e26b22d9-bf40-4162-941c-d80c8522be32",
                            AccessFailedCount = 0,
                            Address = "address1231231231232",
                            BirthPlace = "Ankara",
                            BirthYear = new DateTime(1994, 1, 11, 23, 52, 31, 360, DateTimeKind.Local).AddTicks(4209),
                            CompanyId = 1,
                            ConcurrencyStamp = "d170c4d0-c557-44b8-a137-dccc5df1905f",
                            Department = "IT",
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            GenderId = 2,
                            LockoutEnabled = false,
                            MobileNumber = "5554443322",
                            Name = "user2",
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "USER2",
                            Occupation = "Formatçı",
                            PasswordHash = "AQAAAAEAACcQAAAAEEFK6MUFHPft8Si2yr0Mycbl60VRXjhV0f24M14WiQPqw65BYcPgMzRcjaftOe5DiQ==",
                            PhoneNumberConfirmed = false,
                            Salary = 20000m,
                            SecurityStamp = "8c9dfeae-2701-441a-bba9-b1b1ff8d51f1",
                            StartDate = new DateTime(2014, 1, 11, 23, 52, 31, 360, DateTimeKind.Local).AddTicks(4210),
                            Surname = "user2surname",
                            TurkishIdentificationNumber = "11111111111",
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            YearlyAdvanceAmountLeft = 40000m,
                            YearlyLeaveDaysLeft = 20
                        },
                        new
                        {
                            Id = "95bf72c4-a923-49f0-9474-0bd47e07504d",
                            AccessFailedCount = 0,
                            Address = "webadminaddress1231231231232",
                            BirthPlace = "Ank",
                            BirthYear = new DateTime(1994, 1, 11, 23, 52, 31, 361, DateTimeKind.Local).AddTicks(4283),
                            CompanyId = 2,
                            ConcurrencyStamp = "820dc388-addf-4fe0-95cc-90719c03aa42",
                            Department = "IT",
                            Email = "webadmin@gmail.com",
                            EmailConfirmed = true,
                            GenderId = 2,
                            LockoutEnabled = false,
                            MobileNumber = "5554443322",
                            Name = "webadmin",
                            NormalizedEmail = "WEBADMIN@GMAIL.COM",
                            NormalizedUserName = "WEBADMIN",
                            Occupation = "Formatçı",
                            PasswordHash = "AQAAAAEAACcQAAAAEFe5cw3M3Gy0TRWohH/FoMJNPK3L4XZ0I8pWRfhBAKEh3IY84yVXUuBASxx3qmPl6Q==",
                            PhoneNumberConfirmed = false,
                            Salary = 20000m,
                            SecurityStamp = "61f7e64b-9e96-45df-b4f0-b2ecb6ee8736",
                            StartDate = new DateTime(2014, 1, 11, 23, 52, 31, 361, DateTimeKind.Local).AddTicks(4287),
                            Surname = "webadminname",
                            TurkishIdentificationNumber = "11111111111",
                            TwoFactorEnabled = false,
                            UserName = "webadmin",
                            YearlyAdvanceAmountLeft = 40000m,
                            YearlyLeaveDaysLeft = 20
                        },
                        new
                        {
                            Id = "87dbdd45-6efc-44e1-8526-5772b145ff1f",
                            AccessFailedCount = 0,
                            Address = "adminaddress1231231231232",
                            BirthPlace = "Ankara",
                            BirthYear = new DateTime(1974, 1, 11, 23, 52, 31, 362, DateTimeKind.Local).AddTicks(3609),
                            CompanyId = 1,
                            ConcurrencyStamp = "f9c59715-f42c-4492-a508-c6124a758b7b",
                            Department = "PATRON",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            GenderId = 1,
                            LockoutEnabled = false,
                            MobileNumber = "5325323232",
                            Name = "adminname",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            Occupation = "PATRON",
                            PasswordHash = "AQAAAAEAACcQAAAAEPdD2DyQxNTg/aHT2V/DQWTFXcOOwhI2hbSh2UVBP0o7A9kegicvIq6Zr2BUrAKLbQ==",
                            PhoneNumberConfirmed = false,
                            Salary = 500000m,
                            SecurityStamp = "595f593c-0675-4fc6-9f14-3c19af2c6326",
                            StartDate = new DateTime(2009, 1, 11, 23, 52, 31, 362, DateTimeKind.Local).AddTicks(3610),
                            Surname = "adminsurname",
                            TurkishIdentificationNumber = "22222222222",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            YearlyAdvanceAmountLeft = 40000m,
                            YearlyLeaveDaysLeft = 20
                        });
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FoundationYear")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MersisNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyTypeId");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St, City",
                            CompanyTypeId = 1,
                            ContractEndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractStartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "company1@example.com",
                            EmployeeCount = 100,
                            FoundationYear = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MersisNo = "0123456789000015",
                            Name = "Company 1",
                            PhoneNumber = "5555555555",
                            TaxNo = "1234567890",
                            TaxOffice = "Ankara"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Oak St, City",
                            CompanyTypeId = 2,
                            ContractEndDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractStartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "company2@example.com",
                            EmployeeCount = 50,
                            FoundationYear = new DateTime(2005, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MersisNo = "123",
                            Name = "Company 2",
                            PhoneNumber = "5555555555",
                            TaxNo = "123",
                            TaxOffice = "A"
                        });
                });

            modelBuilder.Entity("HrApp.Domain.Entities.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Limited"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Anonim"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kooperatif"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kollektif"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Komandit"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Adi"
                        });
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "₺"
                        },
                        new
                        {
                            Id = 2,
                            Name = "€"
                        },
                        new
                        {
                            Id = 3,
                            Name = "$"
                        },
                        new
                        {
                            Id = 4,
                            Name = "£"
                        });
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ExpenseTypeId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExpenseType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Food and Beverage"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Education"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Accommodation"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Travel"
                        });
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<int>("NumDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("Leave");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LeaveTypeFocusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeaveTypeFocusId");

                    b.ToTable("LeaveType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LeaveTypeFocusId = 3,
                            Name = "Annual",
                            NumDays = 1
                        },
                        new
                        {
                            Id = 2,
                            LeaveTypeFocusId = 2,
                            Name = "Maternity",
                            NumDays = 56
                        },
                        new
                        {
                            Id = 3,
                            LeaveTypeFocusId = 3,
                            Name = "Bereavement",
                            NumDays = 3
                        },
                        new
                        {
                            Id = 4,
                            LeaveTypeFocusId = 1,
                            Name = "Paternity",
                            NumDays = 5
                        },
                        new
                        {
                            Id = 5,
                            LeaveTypeFocusId = 3,
                            Name = "Marriage",
                            NumDays = 3
                        });
                });

            modelBuilder.Entity("HrApp.Domain.Entities.LeaveTypeFocus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LeaveTypeFocus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Everyone"
                        });
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ExceptionMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExceptionTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExceptionMessage = "Test Exception",
                            ExceptionMethod = "N/A",
                            ExceptionPath = "N/A",
                            ExceptionTime = new DateTime(2024, 1, 11, 23, 52, 31, 363, DateTimeKind.Local).AddTicks(3208)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "87dbdd45-6efc-44e1-8526-5772b145ff1f",
                            RoleId = "62e90be7-9942-4c31-9923-86ba0cafba13"
                        },
                        new
                        {
                            UserId = "95bf72c4-a923-49f0-9474-0bd47e07504d",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Advance", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.AdvanceType", "AdvanceType")
                        .WithMany("Advances")
                        .HasForeignKey("AdvanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany("Advances")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.ApprovalStatus", "ApprovalStatus")
                        .WithMany("Advances")
                        .HasForeignKey("ApprovalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.Currency", "Currency")
                        .WithMany("Advances")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvanceType");

                    b.Navigation("AppUser");

                    b.Navigation("ApprovalStatus");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.Company", "Company")
                        .WithMany("AppUsers")
                        .HasForeignKey("CompanyId");

                    b.HasOne("HrApp.Domain.Entities.Gender", "Gender")
                        .WithMany("AppUsers")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Company", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.CompanyType", "CompanyType")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyType");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Expense", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany("Expenses")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.ApprovalStatus", "ApprovalStatus")
                        .WithMany("Expenses")
                        .HasForeignKey("ApprovalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.Currency", "Currency")
                        .WithMany("Expenses")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.ExpenseType", "ExpenseType")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("ApprovalStatus");

                    b.Navigation("Currency");

                    b.Navigation("ExpenseType");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Leave", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany("Leaves")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.ApprovalStatus", "ApprovalStatus")
                        .WithMany("Leaves")
                        .HasForeignKey("ApprovalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.LeaveType", "LeaveType")
                        .WithMany("Leaves")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("ApprovalStatus");

                    b.Navigation("LeaveType");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.LeaveType", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.LeaveTypeFocus", "LeaveTypeFocus")
                        .WithMany("LeaveTypes")
                        .HasForeignKey("LeaveTypeFocusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaveTypeFocus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HrApp.Domain.Entities.AdvanceType", b =>
                {
                    b.Navigation("Advances");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.ApprovalStatus", b =>
                {
                    b.Navigation("Advances");

                    b.Navigation("Expenses");

                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Advances");

                    b.Navigation("Expenses");

                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Company", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.CompanyType", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Currency", b =>
                {
                    b.Navigation("Advances");

                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.ExpenseType", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Gender", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.LeaveType", b =>
                {
                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.LeaveTypeFocus", b =>
                {
                    b.Navigation("LeaveTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
